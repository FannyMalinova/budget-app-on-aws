# Byte-compiled / optimized / DLL files
__pycache__/
*.pyc
*.pyo
*.pyd

# Virtual environments
.venv/
env/
pyvenv.cfg

# IDE specific files
.vscode/
.idea/

# Minikube binary
minikube-linux-amd64

# Directory for virtual Python environments
bin/
include/
lib/
lib64/*

# Migrations and static files
migrations/
static/

# Git related files
.git/

# Build and compiled files
build/
dist/
*.egg-info/
*.egg

# Ansible specific
ansible/*.retry

# Logs and databases
*.log
*.sqlite

# Docker specific files
docker-compose.override.yml
*.env
.env

# Other files
.DS_Store
Thumbs.db
lib64
terraform/budget-app.pem

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

.pre-commit-config.yaml

*.tar
*.zip
*.tgz
*.patch
